{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/client/index.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport WebSocket from \"ws\";\nimport { Context, decode, encode, Schema } from \"@colyseus/schema\";\nimport { Client } from \"../Client\";\nimport { registerSerializer } from \"../serializer/Serializer\";\nimport { SchemaSerializer } from \"../serializer/SchemaSerializer\";\nimport { NoneSerializer } from \"../serializer/NoneSerializer\";\n\ninterface IPlayer {\n    _id: string;\n    location: {\n        mapId: string;\n    };\n    username: string;\n    currentAvatar: string;\n    cryptoWallet: [];\n    lastSavedAt: number;\n}\n\nconst AUTH_TOKEN = \"ArFPtRsXSIciO1TxrRhIApcn-UJoLLxXyKKoi81KLhpo\";\n\nconst headersConfig = {\n    headers: {\n        \"user-agent\":\n            \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36\",\n        origin: \"https://play.pixels.xyz\",\n        referer: \"https://play.pixels.xyz/\",\n        \"content-type\": \"application/json\",\n    },\n};\n\nregisterSerializer(\"schema\", SchemaSerializer);\nregisterSerializer(\"none\", NoneSerializer);\n\nasync function initPlayer(ver: number) {\n    const res = await axios.post(\n        \"https://pixels-server.pixels.xyz/v1/auth/initialize\",\n        JSON.stringify({\n            authToken: AUTH_TOKEN,\n            mapId: \"\",\n            tenant: \"pixels\",\n            walletProvider: \"otpc\",\n            ver: ver,\n        }),\n        headersConfig\n    );\n    return res.data.player as IPlayer;\n}\n\nasync function getVer() {\n    const ver = await axios.get(\n        \"https://play.pixels.xyz/api/ver\",\n        headersConfig\n    );\n    return ver.data.version;\n}\n\nasync function getMinTrafficWorld() {\n    const newDate = Date.now();\n\n    const worldsTraffic = await axios.get(\n        `https://pixels-server.pixels.xyz/v1/game/worlds?v=${newDate}`,\n        headersConfig\n    );\n\n    const minTrafficIndex = worldsTraffic.data\n        .slice(1, 499)\n        .reduce(\n            (minIndex: string | number, world: number, currentIndex: any) => {\n                if (world > 0 && world < worldsTraffic.data[minIndex]) {\n                    return currentIndex;\n                }\n                return minIndex;\n            },\n            1\n        );\n    return minTrafficIndex;\n}\n\nasync function getRoomData(mapId: string, world: number) {\n    const newDate = Date.now();\n\n    const room = await axios.get(\n        `https://pixels-server.pixels.xyz/game/findroom/${mapId}/${world}?v=${newDate}`,\n        headersConfig\n    );\n    return room.data;\n}\n\nasync function fetchData() {\n    try {\n        console.log(\"Fetching data...\");\n\n        const ver = await getVer();\n\n        // const world = await getMinTrafficWorld();\n        const world = 1;\n\n        const player = await initPlayer(ver);\n\n        const roomInfo = await getRoomData(player.location.mapId, world);\n\n        const client = new Client(\"https://pixels-server.pixels.xyz\");\n\n        const room = await client.joinById(roomInfo.roomId, roomInfo.server, {\n            mapId: player.location.mapId,\n            token: AUTH_TOKEN,\n            isGuest: false,\n            cryptoWallet: player.cryptoWallet,\n            username: player.username,\n            playerId: player._id,\n            world: world,\n            ver: ver,\n            avatar: player.currentAvatar,\n            lastSavedAt: player.lastSavedAt,\n        });\n\n        console.log(\"World with minimum traffic is world: \", world);\n        console.log(\"Init player id: \", player._id);\n        console.log(\"Version: \", ver);\n        console.log(\"Room id: \", roomInfo.roomId);\n        console.log(\"Server: \", roomInfo.server);\n\n        console.log(\"sessionID: \", room.sessionId);\n    } catch (err) {\n        console.log(\"An error occurred:\", err);\n    }\n}\n\nexport default fetchData();\n"]}