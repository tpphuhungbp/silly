{"version":3,"file":"WebSocketTransport.js","sourceRoot":"","sources":["../../src/transport/WebSocketTransport.ts"],"names":[],"mappings":";;;;;;AAAA,4CAA+B;AAG/B,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,IAAI,YAAa,CAAC;AAExD,MAAM,aAAa,GAAG;IAClB,OAAO,EAAE;QACL,YAAY,EACR,uHAAuH;QAC3H,MAAM,EAAE,yBAAyB;QACjC,OAAO,EAAE,0BAA0B;QACnC,cAAc,EAAE,kBAAkB;KACrC;CACJ,CAAC;AAEF,MAAa,kBAAkB;IAI3B,YAAmB,MAA0B;QAA1B,WAAM,GAAN,MAAM,CAAoB;IAAG,CAAC;IAE1C,IAAI,CAAC,IAAiC;QACzC,IAAI,IAAI,YAAY,WAAW,EAAE;YAC7B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACtB;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;SAC7C;IACL,CAAC;IAEM,OAAO,CAAC,GAAW;QACtB,IAAI,CAAC,EAAE,GAAG,IAAI,YAAa,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAEhE,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,IAAa,EAAE,MAAe;QACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC;IACjD,CAAC;CACJ;AA/BD,gDA+BC","sourcesContent":["import NodeWebSocket from \"ws\";\nimport { ITransport, ITransportEventMap } from \"./ITransport\";\n\nconst WebSocket = globalThis.WebSocket || NodeWebSocket;\n\nconst headersConfig = {\n    headers: {\n        \"user-agent\":\n            \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n        origin: \"https://play.pixels.xyz\",\n        referer: \"https://play.pixels.xyz/\",\n        \"content-type\": \"application/json\",\n    },\n};\n\nexport class WebSocketTransport implements ITransport {\n    ws: WebSocket | NodeWebSocket;\n    protocols?: string | string[];\n\n    constructor(public events: ITransportEventMap) {}\n\n    public send(data: ArrayBuffer | Array<number>): void {\n        if (data instanceof ArrayBuffer) {\n            this.ws.send(data);\n        } else if (Array.isArray(data)) {\n            this.ws.send(new Uint8Array(data).buffer);\n        }\n    }\n\n    public connect(url: string) {\n        this.ws = new NodeWebSocket(url, this.protocols, headersConfig);\n\n        this.ws.binaryType = \"arraybuffer\";\n        this.ws.onopen = this.events.onopen;\n        this.ws.onmessage = this.events.onmessage;\n        this.ws.onclose = this.events.onclose;\n        this.ws.onerror = this.events.onerror;\n    }\n\n    public close(code?: number, reason?: string) {\n        this.ws.close(code, reason);\n    }\n\n    get isOpen() {\n        return this.ws.readyState === WebSocket.OPEN;\n    }\n}\n"]}