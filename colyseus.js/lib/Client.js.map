{"version":3,"file":"Client.js","sourceRoot":"","sources":["../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerError } from \"./errors/ServerError\";\nimport { Room, RoomAvailable } from \"./Room\";\nimport { SchemaConstructor } from \"./serializer/SchemaSerializer\";\nimport { HTTP } from \"./HTTP\";\nimport { Auth } from \"./Auth\";\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname`\nconst DEFAULT_ENDPOINT =\n    typeof window !== \"undefined\" &&\n    typeof window?.location?.hostname !== \"undefined\"\n        ? `${window.location.protocol.replace(\"http\", \"ws\")}//${\n              window.location.hostname\n          }${window.location.port && `:${window.location.port}`}`\n        : \"ws://127.0.0.1:2567\";\n\nexport interface EndpointSettings {\n    hostname: string;\n    secure: boolean;\n    port?: number;\n    pathname?: string;\n}\n\nexport class Client {\n    public http: HTTP;\n    public auth: Auth;\n\n    protected settings: EndpointSettings;\n\n    constructor(settings: string | EndpointSettings = DEFAULT_ENDPOINT) {\n        if (typeof settings === \"string\") {\n            //\n            // endpoint by url\n            //\n            const url = new URL(settings);\n            const secure = url.protocol === \"https:\" || url.protocol === \"wss:\";\n            const port = Number(url.port || (secure ? 443 : 80));\n            console.log(\"port : \", port);\n\n            this.settings = {\n                hostname: url.hostname,\n                pathname: url.pathname,\n                port,\n                secure,\n            };\n        } else {\n            //\n            // endpoint by settings\n            //\n            if (settings.port === undefined) {\n                settings.port = settings.secure ? 443 : 80;\n            }\n            if (settings.pathname === undefined) {\n                settings.pathname = \"\";\n            }\n            this.settings = settings;\n        }\n\n        // make sure pathname does not end with \"/\"\n        if (this.settings.pathname.endsWith(\"/\")) {\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\n        }\n\n        this.http = new HTTP(this);\n        this.auth = new Auth(this.http);\n        // console.log(\"auth : \", this.auth);\n        // console.log(\"http : \", this.http);\n    }\n\n    public async joinOrCreate<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinOrCreate\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async create<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"create\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async join<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"join\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async joinById<T>(\n        roomId: string,\n        processId: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinById\",\n            roomId,\n            processId,\n            options,\n            rootSchema\n        );\n    }\n\n    /**\n     * Re-establish connection with a room this client was previously connected to.\n     *\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\n     * @param rootSchema (optional) Concrete root schema definition\n     * @returns Promise<Room>\n     */\n    public async reconnect<T>(\n        reconnectionToken: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        if (\n            typeof reconnectionToken === \"string\" &&\n            typeof rootSchema === \"string\"\n        ) {\n            throw new Error(\n                \"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\"\n            );\n        }\n        const [roomId, token] = reconnectionToken.split(\":\");\n        if (!roomId || !token) {\n            throw new Error(\n                \"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\"\n            );\n        }\n        return await this.createMatchMakeRequest<T>(\n            \"reconnect\",\n            roomId,\n            undefined,\n            { reconnectionToken: token },\n            rootSchema\n        );\n    }\n\n    public async getAvailableRooms<Metadata = any>(\n        roomName: string = \"\"\n    ): Promise<RoomAvailable<Metadata>[]> {\n        return (\n            await this.http.get(`matchmake/${roomName}`, {\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n        ).data;\n    }\n\n    public async consumeSeatReservation<T>(\n        response: any,\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room // used in devMode\n    ): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n\n        room.roomId = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        const options: any = { sessionId: room.sessionId };\n\n        // forward \"reconnection token\" in case of reconnection.\n        if (response.reconnectionToken) {\n            options.reconnectionToken = response.reconnectionToken;\n        }\n\n        const targetRoom = reuseRoomInstance || room;\n        room.connect(\n            this.buildEndpoint(response.room, options),\n            response.devMode &&\n                (async () => {\n                    console.info(\n                        `[Colyseus devMode]: ${String.fromCodePoint(\n                            0x1f504\n                        )} Re-establishing connection with room id '${\n                            room.roomId\n                        }'...`\n                    ); // 🔄\n\n                    let retryCount = 0;\n                    let retryMaxRetries = 8;\n\n                    const retryReconnection = async () => {\n                        retryCount++;\n\n                        try {\n                            await this.consumeSeatReservation(\n                                response,\n                                rootSchema,\n                                targetRoom\n                            );\n                            console.info(\n                                `[Colyseus devMode]: ${String.fromCodePoint(\n                                    0x2705\n                                )} Successfully re-established connection with room '${\n                                    room.roomId\n                                }'`\n                            ); // ✅\n                        } catch (e) {\n                            if (retryCount < retryMaxRetries) {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x1f504\n                                    )} retrying... (${retryCount} out of ${retryMaxRetries})`\n                                ); // 🔄\n                                setTimeout(retryReconnection, 2000);\n                            } else {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x274c\n                                    )} Failed to reconnect. Is your server running? Please check server logs.`\n                                ); // ❌\n                            }\n                        }\n                    };\n\n                    setTimeout(retryReconnection, 2000);\n                }),\n            targetRoom\n        );\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) =>\n                reject(new ServerError(code, message));\n            targetRoom.onError.once(onError);\n\n            targetRoom[\"onJoin\"].once(() => {\n                targetRoom.onError.remove(onError);\n                resolve(targetRoom);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        processId: string = \"\",\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room\n    ) {\n        const response = (\n            await this.http.post(\n                `matchmake/${method}/${roomName}/${processId}`,\n                {\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        \"user-agent\":\n                            \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36\",\n                        origin: \"https://play.pixels.xyz\",\n                        referer: \"https://play.pixels.xyz/\",\n                    },\n                    body: JSON.stringify(options),\n                }\n            )\n        ).data;\n        // FIXME: HTTP class is already handling this as ServerError.\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        // forward reconnection token during \"reconnect\" methods.\n        //ko lq\n        if (method === \"reconnect\") {\n            response.reconnectionToken = options.reconnectionToken;\n        }\n        // return response;\n        return await this.consumeSeatReservation<T>(\n            response,\n            rootSchema,\n            reuseRoomInstance\n        );\n    }\n\n    protected createRoom<T>(\n        roomName: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        // append provided options\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        let endpoint = this.settings.secure ? \"wss://\" : \"ws://\";\n\n        if (room.publicAddress) {\n            endpoint += `${room.publicAddress}`;\n        } else {\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${\n                this.settings.pathname\n            }`;\n        }\n\n        return `${endpoint}/${room.processId}/${room.roomId}?${params.join(\n            \"&\"\n        )}`;\n    }\n\n    protected getHttpEndpoint(segments: string = \"\") {\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\n        return `${this.settings.secure ? \"https\" : \"http\"}://${\n            this.settings.hostname\n        }${this.getEndpointPort()}${this.settings.pathname}${path}`;\n    }\n\n    protected getEndpointPort() {\n        return this.settings.port !== 80 && this.settings.port !== 443\n            ? `:${this.settings.port}`\n            : \"\";\n    }\n}\n"]}