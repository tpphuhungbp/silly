{"version":3,"file":"HTTP.js","sourceRoot":"","sources":["../src/HTTP.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,sDAAmD;AACnD,+CAAiC;AAEjC,MAAa,IAAI;IAGb,YAAsB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEjC,GAAG,CACN,IAAY,EACZ,UAAmC,EAAE;QAErC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,IAAI,CACP,IAAY,EACZ,UAAmC,EAAE;QAErC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAEM,GAAG,CACN,IAAY,EACZ,UAAmC,EAAE;QAErC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,GAAG,CACN,IAAY,EACZ,UAAmC,EAAE;QAErC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAES,OAAO,CACb,MAAsC,EACtC,IAAY,EACZ,UAAmC,EAAE;QAErC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC,MAAM,CAAC,CACjB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EACpC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAC3B,CAAC,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE;;YACf,MAAM,IAAI,yBAAW,CACjB,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,EAClB,CAAA,MAAA,CAAC,CAAC,IAAI,0CAAE,KAAK,KAAI,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS,CAC7D,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAES,UAAU,CAAC,OAAgC;QACjD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAClB,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;aACxB;YAED,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,SAAS,EAAE,CAAC;YAC9D,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC;SAClC;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AA9DD,oBA8DC","sourcesContent":["import { Client } from \"./Client\";\nimport { ServerError } from \"./errors/ServerError\";\nimport * as httpie from \"httpie\";\n\nexport class HTTP {\n    public authToken: string;\n\n    constructor(protected client: Client) {}\n\n    public get<T = any>(\n        path: string,\n        options: Partial<httpie.Options> = {}\n    ): Promise<httpie.Response<T>> {\n        return this.request(\"get\", path, options);\n    }\n\n    public post<T = any>(\n        path: string,\n        options: Partial<httpie.Options> = {}\n    ): Promise<httpie.Response<T>> {\n        return this.request(\"post\", path, options);\n    }\n\n    public del<T = any>(\n        path: string,\n        options: Partial<httpie.Options> = {}\n    ): Promise<httpie.Response<T>> {\n        return this.request(\"del\", path, options);\n    }\n\n    public put<T = any>(\n        path: string,\n        options: Partial<httpie.Options> = {}\n    ): Promise<httpie.Response<T>> {\n        return this.request(\"put\", path, options);\n    }\n\n    protected request(\n        method: \"get\" | \"post\" | \"put\" | \"del\",\n        path: string,\n        options: Partial<httpie.Options> = {}\n    ): Promise<httpie.Response> {\n        console.log(\"HTTP REQ : \", this.client[\"getHttpEndpoint\"](path));\n        return httpie[method](\n            this.client[\"getHttpEndpoint\"](path),\n            this.getOptions(options)\n        ).catch((e: any) => {\n            throw new ServerError(\n                e.statusCode || -1,\n                e.data?.error || e.statusMessage || e.message || \"offline\"\n            );\n        });\n    }\n\n    protected getOptions(options: Partial<httpie.Options>) {\n        if (this.authToken) {\n            if (!options.headers) {\n                options.headers = {};\n            }\n\n            options.headers[\"Authorization\"] = `Bearer ${this.authToken}`;\n            options.withCredentials = true;\n        }\n\n        return options;\n    }\n}\n"]}