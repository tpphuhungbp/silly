{"version":3,"file":"Client.js","sources":["../../src/Client.ts"],"sourcesContent":["import { ServerError } from \"./errors/ServerError\";\nimport { Room, RoomAvailable } from \"./Room\";\nimport { SchemaConstructor } from \"./serializer/SchemaSerializer\";\nimport { HTTP } from \"./HTTP\";\nimport { Auth } from \"./Auth\";\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname`\nconst DEFAULT_ENDPOINT =\n    typeof window !== \"undefined\" &&\n    typeof window?.location?.hostname !== \"undefined\"\n        ? `${window.location.protocol.replace(\"http\", \"ws\")}//${\n              window.location.hostname\n          }${window.location.port && `:${window.location.port}`}`\n        : \"ws://127.0.0.1:2567\";\n\nexport interface EndpointSettings {\n    hostname: string;\n    secure: boolean;\n    port?: number;\n    pathname?: string;\n}\n\nexport class Client {\n    public http: HTTP;\n    public auth: Auth;\n\n    protected settings: EndpointSettings;\n\n    constructor(settings: string | EndpointSettings = DEFAULT_ENDPOINT) {\n        if (typeof settings === \"string\") {\n            //\n            // endpoint by url\n            //\n            const url = new URL(settings);\n            const secure = url.protocol === \"https:\" || url.protocol === \"wss:\";\n            const port = Number(url.port || (secure ? 443 : 80));\n            console.log(\"port : \", port);\n\n            this.settings = {\n                hostname: url.hostname,\n                pathname: url.pathname,\n                port,\n                secure,\n            };\n        } else {\n            //\n            // endpoint by settings\n            //\n            if (settings.port === undefined) {\n                settings.port = settings.secure ? 443 : 80;\n            }\n            if (settings.pathname === undefined) {\n                settings.pathname = \"\";\n            }\n            this.settings = settings;\n        }\n\n        // make sure pathname does not end with \"/\"\n        if (this.settings.pathname.endsWith(\"/\")) {\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\n        }\n\n        this.http = new HTTP(this);\n        this.auth = new Auth(this.http);\n        // console.log(\"auth : \", this.auth);\n        // console.log(\"http : \", this.http);\n    }\n\n    public async joinOrCreate<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinOrCreate\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async create<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"create\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async join<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"join\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async joinById<T>(\n        roomId: string,\n        processId: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinById\",\n            roomId,\n            processId,\n            options,\n            rootSchema\n        );\n    }\n\n    /**\n     * Re-establish connection with a room this client was previously connected to.\n     *\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\n     * @param rootSchema (optional) Concrete root schema definition\n     * @returns Promise<Room>\n     */\n    public async reconnect<T>(\n        reconnectionToken: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        if (\n            typeof reconnectionToken === \"string\" &&\n            typeof rootSchema === \"string\"\n        ) {\n            throw new Error(\n                \"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\"\n            );\n        }\n        const [roomId, token] = reconnectionToken.split(\":\");\n        if (!roomId || !token) {\n            throw new Error(\n                \"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\"\n            );\n        }\n        return await this.createMatchMakeRequest<T>(\n            \"reconnect\",\n            roomId,\n            undefined,\n            { reconnectionToken: token },\n            rootSchema\n        );\n    }\n\n    public async getAvailableRooms<Metadata = any>(\n        roomName: string = \"\"\n    ): Promise<RoomAvailable<Metadata>[]> {\n        return (\n            await this.http.get(`matchmake/${roomName}`, {\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n        ).data;\n    }\n\n    public async consumeSeatReservation<T>(\n        response: any,\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room // used in devMode\n    ): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n\n        room.roomId = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        const options: any = { sessionId: room.sessionId };\n\n        // forward \"reconnection token\" in case of reconnection.\n        if (response.reconnectionToken) {\n            options.reconnectionToken = response.reconnectionToken;\n        }\n\n        const targetRoom = reuseRoomInstance || room;\n        room.connect(\n            this.buildEndpoint(response.room, options),\n            response.devMode &&\n                (async () => {\n                    console.info(\n                        `[Colyseus devMode]: ${String.fromCodePoint(\n                            0x1f504\n                        )} Re-establishing connection with room id '${\n                            room.roomId\n                        }'...`\n                    ); // 🔄\n\n                    let retryCount = 0;\n                    let retryMaxRetries = 8;\n\n                    const retryReconnection = async () => {\n                        retryCount++;\n\n                        try {\n                            await this.consumeSeatReservation(\n                                response,\n                                rootSchema,\n                                targetRoom\n                            );\n                            console.info(\n                                `[Colyseus devMode]: ${String.fromCodePoint(\n                                    0x2705\n                                )} Successfully re-established connection with room '${\n                                    room.roomId\n                                }'`\n                            ); // ✅\n                        } catch (e) {\n                            if (retryCount < retryMaxRetries) {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x1f504\n                                    )} retrying... (${retryCount} out of ${retryMaxRetries})`\n                                ); // 🔄\n                                setTimeout(retryReconnection, 2000);\n                            } else {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x274c\n                                    )} Failed to reconnect. Is your server running? Please check server logs.`\n                                ); // ❌\n                            }\n                        }\n                    };\n\n                    setTimeout(retryReconnection, 2000);\n                }),\n            targetRoom\n        );\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) =>\n                reject(new ServerError(code, message));\n            targetRoom.onError.once(onError);\n\n            targetRoom[\"onJoin\"].once(() => {\n                targetRoom.onError.remove(onError);\n                resolve(targetRoom);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        processId: string = \"\",\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room\n    ) {\n        const response = (\n            await this.http.post(\n                `matchmake/${method}/${roomName}/${processId}`,\n                {\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        \"user-agent\":\n                            \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36\",\n                        origin: \"https://play.pixels.xyz\",\n                        referer: \"https://play.pixels.xyz/\",\n                    },\n                    body: JSON.stringify(options),\n                }\n            )\n        ).data;\n        // FIXME: HTTP class is already handling this as ServerError.\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        // forward reconnection token during \"reconnect\" methods.\n        //ko lq\n        if (method === \"reconnect\") {\n            response.reconnectionToken = options.reconnectionToken;\n        }\n        // return response;\n        return await this.consumeSeatReservation<T>(\n            response,\n            rootSchema,\n            reuseRoomInstance\n        );\n    }\n\n    protected createRoom<T>(\n        roomName: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        // append provided options\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        let endpoint = this.settings.secure ? \"wss://\" : \"ws://\";\n\n        if (room.publicAddress) {\n            endpoint += `${room.publicAddress}`;\n        } else {\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${\n                this.settings.pathname\n            }`;\n        }\n\n        return `${endpoint}/${room.processId}/${room.roomId}?${params.join(\n            \"&\"\n        )}`;\n    }\n\n    protected getHttpEndpoint(segments: string = \"\") {\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\n        return `${this.settings.secure ? \"https\" : \"http\"}://${\n            this.settings.hostname\n        }${this.getEndpointPort()}${this.settings.pathname}${path}`;\n    }\n\n    protected getEndpointPort() {\n        return this.settings.port !== 80 && this.settings.port !== 443\n            ? `:${this.settings.port}`\n            : \"\";\n    }\n}\n"],"names":["__extends","HTTP","Auth","__awaiter","ServerError","Room"],"mappings":"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"}