{"version":3,"file":"Client.mjs","sources":["../../src/Client.ts"],"sourcesContent":["import { ServerError } from \"./errors/ServerError\";\nimport { Room, RoomAvailable } from \"./Room\";\nimport { SchemaConstructor } from \"./serializer/SchemaSerializer\";\nimport { HTTP } from \"./HTTP\";\nimport { Auth } from \"./Auth\";\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname`\nconst DEFAULT_ENDPOINT =\n    typeof window !== \"undefined\" &&\n    typeof window?.location?.hostname !== \"undefined\"\n        ? `${window.location.protocol.replace(\"http\", \"ws\")}//${\n              window.location.hostname\n          }${window.location.port && `:${window.location.port}`}`\n        : \"ws://127.0.0.1:2567\";\n\nexport interface EndpointSettings {\n    hostname: string;\n    secure: boolean;\n    port?: number;\n    pathname?: string;\n}\n\nexport class Client {\n    public http: HTTP;\n    public auth: Auth;\n\n    protected settings: EndpointSettings;\n\n    constructor(settings: string | EndpointSettings = DEFAULT_ENDPOINT) {\n        if (typeof settings === \"string\") {\n            //\n            // endpoint by url\n            //\n            const url = new URL(settings);\n            const secure = url.protocol === \"https:\" || url.protocol === \"wss:\";\n            const port = Number(url.port || (secure ? 443 : 80));\n            console.log(\"port : \", port);\n\n            this.settings = {\n                hostname: url.hostname,\n                pathname: url.pathname,\n                port,\n                secure,\n            };\n        } else {\n            //\n            // endpoint by settings\n            //\n            if (settings.port === undefined) {\n                settings.port = settings.secure ? 443 : 80;\n            }\n            if (settings.pathname === undefined) {\n                settings.pathname = \"\";\n            }\n            this.settings = settings;\n        }\n\n        // make sure pathname does not end with \"/\"\n        if (this.settings.pathname.endsWith(\"/\")) {\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\n        }\n\n        this.http = new HTTP(this);\n        this.auth = new Auth(this.http);\n        // console.log(\"auth : \", this.auth);\n        // console.log(\"http : \", this.http);\n    }\n\n    public async joinOrCreate<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinOrCreate\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async create<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"create\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async join<T>(\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"join\",\n            roomName,\n            options,\n            rootSchema\n        );\n    }\n\n    public async joinById<T>(\n        roomId: string,\n        processId: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return await this.createMatchMakeRequest<T>(\n            \"joinById\",\n            roomId,\n            processId,\n            options,\n            rootSchema\n        );\n    }\n\n    /**\n     * Re-establish connection with a room this client was previously connected to.\n     *\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\n     * @param rootSchema (optional) Concrete root schema definition\n     * @returns Promise<Room>\n     */\n    public async reconnect<T>(\n        reconnectionToken: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        if (\n            typeof reconnectionToken === \"string\" &&\n            typeof rootSchema === \"string\"\n        ) {\n            throw new Error(\n                \"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\"\n            );\n        }\n        const [roomId, token] = reconnectionToken.split(\":\");\n        if (!roomId || !token) {\n            throw new Error(\n                \"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\"\n            );\n        }\n        return await this.createMatchMakeRequest<T>(\n            \"reconnect\",\n            roomId,\n            undefined,\n            { reconnectionToken: token },\n            rootSchema\n        );\n    }\n\n    public async getAvailableRooms<Metadata = any>(\n        roomName: string = \"\"\n    ): Promise<RoomAvailable<Metadata>[]> {\n        return (\n            await this.http.get(`matchmake/${roomName}`, {\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n        ).data;\n    }\n\n    public async consumeSeatReservation<T>(\n        response: any,\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room // used in devMode\n    ): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n\n        room.roomId = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        const options: any = { sessionId: room.sessionId };\n\n        // forward \"reconnection token\" in case of reconnection.\n        if (response.reconnectionToken) {\n            options.reconnectionToken = response.reconnectionToken;\n        }\n\n        const targetRoom = reuseRoomInstance || room;\n        room.connect(\n            this.buildEndpoint(response.room, options),\n            response.devMode &&\n                (async () => {\n                    console.info(\n                        `[Colyseus devMode]: ${String.fromCodePoint(\n                            0x1f504\n                        )} Re-establishing connection with room id '${\n                            room.roomId\n                        }'...`\n                    ); // 🔄\n\n                    let retryCount = 0;\n                    let retryMaxRetries = 8;\n\n                    const retryReconnection = async () => {\n                        retryCount++;\n\n                        try {\n                            await this.consumeSeatReservation(\n                                response,\n                                rootSchema,\n                                targetRoom\n                            );\n                            console.info(\n                                `[Colyseus devMode]: ${String.fromCodePoint(\n                                    0x2705\n                                )} Successfully re-established connection with room '${\n                                    room.roomId\n                                }'`\n                            ); // ✅\n                        } catch (e) {\n                            if (retryCount < retryMaxRetries) {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x1f504\n                                    )} retrying... (${retryCount} out of ${retryMaxRetries})`\n                                ); // 🔄\n                                setTimeout(retryReconnection, 2000);\n                            } else {\n                                console.info(\n                                    `[Colyseus devMode]: ${String.fromCodePoint(\n                                        0x274c\n                                    )} Failed to reconnect. Is your server running? Please check server logs.`\n                                ); // ❌\n                            }\n                        }\n                    };\n\n                    setTimeout(retryReconnection, 2000);\n                }),\n            targetRoom\n        );\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) =>\n                reject(new ServerError(code, message));\n            targetRoom.onError.once(onError);\n\n            targetRoom[\"onJoin\"].once(() => {\n                targetRoom.onError.remove(onError);\n                resolve(targetRoom);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        processId: string = \"\",\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room\n    ) {\n        const response = (\n            await this.http.post(\n                `matchmake/${method}/${roomName}/${processId}`,\n                {\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        \"user-agent\":\n                            \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36\",\n                        origin: \"https://play.pixels.xyz\",\n                        referer: \"https://play.pixels.xyz/\",\n                    },\n                    body: JSON.stringify(options),\n                }\n            )\n        ).data;\n        // FIXME: HTTP class is already handling this as ServerError.\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        // forward reconnection token during \"reconnect\" methods.\n        //ko lq\n        if (method === \"reconnect\") {\n            response.reconnectionToken = options.reconnectionToken;\n        }\n        // return response;\n        return await this.consumeSeatReservation<T>(\n            response,\n            rootSchema,\n            reuseRoomInstance\n        );\n    }\n\n    protected createRoom<T>(\n        roomName: string,\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        // append provided options\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        let endpoint = this.settings.secure ? \"wss://\" : \"ws://\";\n\n        if (room.publicAddress) {\n            endpoint += `${room.publicAddress}`;\n        } else {\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${\n                this.settings.pathname\n            }`;\n        }\n\n        return `${endpoint}/${room.processId}/${room.roomId}?${params.join(\n            \"&\"\n        )}`;\n    }\n\n    protected getHttpEndpoint(segments: string = \"\") {\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\n        return `${this.settings.secure ? \"https\" : \"http\"}://${\n            this.settings.hostname\n        }${this.getEndpointPort()}${this.settings.pathname}${path}`;\n    }\n\n    protected getEndpointPort() {\n        return this.settings.port !== 80 && this.settings.port !== 443\n            ? `:${this.settings.port}`\n            : \"\";\n    }\n}\n"],"names":[],"mappings":"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"}